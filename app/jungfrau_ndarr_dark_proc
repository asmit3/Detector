#!/usr/bin/env python

#------------------------------
import os
import sys
import psana
import numpy as np
from time import time, localtime, strftime
from pyimgalgos.GlobalUtils import print_ndarr, divide_protected, print_command_line_parameters, reshape_to_2d
#from Detector.GlobalUtils import print_ndarr, divide_protected

#------------------------------

def get_jungfrau_data_object(evt, src) :
    """get jungfrau data object
    """
    o = evt.get(psana.Jungfrau.ElementV1, src)
    if o is not None : return o
    return None


def get_jungfrau_config_object(env, src) :
    cfg = env.configStore()
    o = cfg.get(psana.Jungfrau.ConfigV1, src)
    if o is not None : return o
    return None


def get_gain_mode(env, src) :
    """Returns gain mode object, e.g. psana.Jungfrau.GainMode.ForcedGain1
    """
    co = get_jungfrau_config_object(env, psana.Source(src))
    return co.gainMode()

#------------------------------

def evaluate_limits(arr, nneg=5, npos=5, lim_lo=1, lim_hi=1000, verbos=1, cmt='') :
    """Evaluates low and high limit of the array, which are used to find bad pixels.
    """
    ave, std = (arr.mean(), arr.std()) if (nneg>0 or npos>0) else (None,None)
    lo = ave-nneg*std if nneg>0 else lim_lo
    hi = ave+npos*std if npos>0 else lim_hi
    lo, hi = max(lo, lim_lo), min(hi, lim_hi)

    if verbos & 1 :
        print '  %s: %s ave, std = %.3f, %.3f  low, high limits = %.3f, %.3f'%\
              (sys._getframe().f_code.co_name, cmt, ave, std, lo, hi)

    return lo, hi

#------------------------------

def plot_det_image(det, evt, nda, tit='') :
    """Plots averaged image
    """
    import pyimgalgos.GlobalGraphics as gg

    #img = det.image(evt, nda)
    img = reshape_to_2d(nda)
    if img is None : 
        print 'plot_det_image - Image "%s" is not available.'%tit
        #sys.exit('Image is not available. FURTHER TEST IS TERMINATED')
        return
    
    ave, rms = nda.mean(), nda.std()
    gg.plotImageLarge(img, amp_range=(ave-1*rms, ave+3*rms), title=tit)
    gg.show()

#------------------------------

def str_tstamp(fmt='%Y-%m-%dT%H:%M:%S', time_sec=None) :
    return strftime(fmt, localtime(time_sec))

#------------------------------

def time_pars(evt):
    """Returns time relevant parameters from evt"""
    evtid = evt.get(psana.EventId)
    tsec, tnsec = evtid.time()
    fid = evtid.fiducials()
    date = str_tstamp('%Y-%m-%d', tsec)
    time = str_tstamp('%H:%M:%S', tsec)
    return tsec, tnsec, fid, date, time

#------------------------------

def replace(in_tmp, pattern, subst) :
    """If pattern in the in_tmp replace it with subst.
       Returns str object in_tmp with replaced patterns. 
    """
    fields = in_tmp.split(pattern, 1) 
    if len(fields) > 1 :
        return '%s%s%s' % (fields[0], subst, fields[1])
    else :
        return in_tmp

#------------------------------

def fname_template(exp, runnum, tsec, tnsec, fid, tsdate, tstime, src, nevts, ofname):
    """Replaces parts of the file name specified as
       #src, #exp, #run, #evts, #type, #date, #time, #fid, #sec, #nsec
       with actual values
    """
    template = replace(ofname,   '#src', src)
    template = replace(template, '#exp', exp)
    template = replace(template, '#run', 'r%04d'%runnum)
    template = replace(template, '#type', '%s')
    template = replace(template, '#date', tsdate)
    template = replace(template, '#time', tstime)
    template = replace(template, '#fid',  '%06d'%fid)
    template = replace(template, '#sec',  '%d' % tsec)
    template = replace(template, '#nsec', '%09d' % tnsec)
    template = replace(template, '#evts', 'e%06d' % nevts)
    if not '%s' in template : template += '-%s'
    return template

#------------------------------

class JungfrauNDArrDarkProc :

    BW1 =  040000 # 16384 or 1<<14 (15-th bit starting from 0)
    BW2 = 0100000 # 32768 or 2<<14 or 1<<15
    BW3 = 0140000 # 49152 or 3<<14
    MSK =  0x3fff # 16383 or (1<<14)-1 - 14-bit mask
    #MSK =  037777 # 16383 or (1<<14)-1

    def __init__(self, parser=None):
        self.init_parameters(parser)
        if self.verbos & 1 : self.print_attrs()


    def init_parameters(self, parser=None) :
        """Command line parameters parsing"""
        self.parser = option_parser() if parser is None else parser

        (popts, pargs) = self.parser.parse_args()

        if popts.dsname is None : raise IOError('WARNING: option "-d <dataset>" MUST be specified.') # sys.exit()
        if popts.source is None : raise IOError('WARNING: option "-s <source>" MUST be specified.')

        self.dsname = popts.dsname
        self.src    = popts.source
        self.ofname = popts.ofname
        self.events = popts.events
        self.evskip = popts.evskip

        self.int_lo = popts.intlow if popts.intlow is not None else 1
        self.int_hi = popts.inthig if popts.inthig is not None else 16000
        self.rms_lo = popts.rmslow # if None - will be evaluated later
        self.rms_hi = popts.rmshig # if None - will be evaluated later
        self.fraclm = popts.fraclm

        self.plotim = popts.plotim
        self.verbos = popts.verbos
        self.savebw = popts.savebw

        self.intnlo = popts.intnlo
        self.intnhi = popts.intnhi
        self.rmsnlo = popts.rmsnlo
        self.rmsnhi = popts.rmsnhi

        self.evstg1 = max(self.events*0.05, 5)
        self.nsigma = popts.nsigma
        
        self.det     = None
        self.shape   = None
        self.counter = 0
        self.stage   = 0


    def print_attrs(self) :
        print '%s\nAttributes of the %s object' % (50*'_', self.__class__.__name__)
        print 'dataset name                    : %s'   % self.dsname
        print 'source name                     : %s'   % self.src   
        print 'output file name template       : %s'   % self.ofname
        print 'number of events to collect     : %d'   % self.events
        print 'number of events to skip        : %d'   % self.evskip
        print 'number of events for stage 1    : %d'   % self.evstg1
        print 'number of sigma intensity range : %.3f' % self.nsigma
        print 'control bit-word to plot images : %d'   % self.plotim
        print 'control bit-word for verbosity  : %d'   % self.verbos
        print 'control bit-word to save arrays : %d'   % self.savebw
        print 'INTENSITY low limit (ADU)       : ',      self.int_lo
        print 'INTENSITY high limit (ADU)      : ',      self.int_hi
        print 'RMS low limit (ADU)             : ',      self.rms_lo
        print 'RMS high limit (ADU)            : ',      self.rms_hi
        print 'allowed low/high fraction limit : %.3f' % self.fraclm
        print '\nParameters for auto-evaluation of limits:'
        print 'number of sigma from mean for INTENSITY low limit  : ',  self.intnlo
        print 'number of sigma from mean for INTENSITY high limit : ',  self.intnhi
        print 'number of sigma from mean for RMS low limit        : ',  self.rmsnlo
        print 'number of sigma from mean for RMS high limit       : ',  self.rmsnhi
        print 50*'_', '\n'


    def _common_mode_pars(self, arr_ave, arr_rms, arr_msk) :
        """Returns detector-dependent common mode parameters as np.array for a few detectors and None for others.
        """
        import PSCalib.GlobalUtils as gu 
        import math

        dettype = gu.det_type_from_source(self.src)

        ave = arr_ave[arr_msk>0].mean()
        #rms = arr_ave[arr_msk>0].std()
        rms = arr_rms[arr_msk>0].mean()

        if self.verbos & 1 :
            print 'Evaluate common mode for source: %s det: %s, estimated intensity ave: %.3f  rms: %.3f' %\
                  (self.src, gu.dic_det_type_to_name[dettype], ave, rms)

        if dettype == gu.PNCCD :
            return np.array((3, math.ceil(4*rms), math.ceil(4*rms), 128))

        #elif dettype == gu.EPIX100A :
        #    return np.array((4, 6, math.ceil(2*rms), math.ceil(2*rms)))

        #elif dettype == gu.CSPAD :
        #    return np.array((1, math.ceil(3*rms), math.ceil(2*rms), 100))

        #elif dettype == gu.CSPAD2X2 :
        #    return np.array((1, math.ceil(3*rms), math.ceil(2*rms), 100))

        else :
            return None


    def _init_stage1(self, evt, env) :

        if self.shape is not None : return True

        if self.det is None : self.det = psana.Detector(self.src, env)
        if self.det is None :
            raise ValueError('Can not create the Detector object for source %s' % self.src)

        ndaraw = self.det.raw(evt)

        if ndaraw is None : return False
        if ndaraw.size == 0 : return False
        if ndaraw.shape[0] == 0 : return False

        self.shape = ndaraw.shape
        self.dtype_raw = ndaraw.dtype

        if self.verbos & 1 : print 'Begin stage 1 for %s, raw.dtype = %s, raw.shape = %s, intensity limits low: %.1f  high: %.1f'%\
                                   (self.src, str(self.dtype_raw), str(self.shape), self.int_lo, self.int_hi)

        self.arr0       = np.zeros(self.shape, dtype=self.dtype_raw)
        self.arr1       = np.ones (self.shape, dtype=self.dtype_raw)

        self.sta_int_lo = np.zeros(self.shape, dtype=np.int64)
        self.sta_int_hi = np.zeros(self.shape, dtype=np.int64)

        self.arr_sum0   = np.zeros(self.shape, dtype=np.int64)
        self.arr_sum1   = np.zeros(self.shape, dtype=np.double)
        self.arr_sum2   = np.zeros(self.shape, dtype=np.double)

        self.gate_lo    = self.arr1 * self.int_lo
        self.gate_hi    = self.arr1 * self.int_hi

        if self.savebw & 16 : self.arr_max = np.zeros(self.shape, dtype=self.dtype_raw)
        if self.savebw & 32 : self.arr_min = np.ones (self.shape, dtype=self.dtype_raw) * 0xffff

        self.exp = env.experiment()
        self.runnum = evt.run()
        self.tsec, self.tnsec, self.fid, self.tsdate, self.tstime = time_pars(evt)

        self.stage = 1
        return True


    def event(self, evt, env, evnum) :

        if self.stage < 1 : # to omit function call
           if not self._init_stage1(evt, env) : return

        ndaraw = self.det.raw(evt)
        if ndaraw is None : return
        ndaraw = (ndaraw & self.MSK).astype(self.dtype_raw)
        ndadbl = np.array(ndaraw, dtype=np.double)

        if self.stage < 2 : 
           self._init_stage2()
        self._proc_event(ndadbl, ndaraw)


    def _proc_event(self, ndadbl, ndaraw) :

        self.counter += 1

        cond_lo = ndaraw<self.gate_lo
        cond_hi = ndaraw>self.gate_hi
        condlist = (np.logical_not(np.logical_or(cond_lo, cond_hi)),)

        #print 'XXX:'
        #print_ndarr(self.arr1, 'arr1')
        #print_ndarr(self.arr_sum0, 'arr_sum0')
        #print_ndarr(self.arr_sum1, 'arr_sum1')
        #print_ndarr(self.arr_sum2, 'arr_sum2')

        self.arr_sum0   += np.select(condlist, (self.arr1,), 0)
        self.arr_sum1   += np.select(condlist, (ndadbl,), 0)
        self.arr_sum2   += np.select(condlist, (np.square(ndadbl),), 0)

        self.sta_int_lo += np.select((cond_lo,), (self.arr1,), 0)
        self.sta_int_hi += np.select((cond_hi,), (self.arr1,), 0)

        if self.savebw & 16 : self.arr_max = np.maximum(self.arr_max, ndaraw)
        if self.savebw & 32 : self.arr_min = np.minimum(self.arr_min, ndaraw)


    def _init_stage2(self) :

        #if self.stage & 2 : return
        if self.counter < self.evstg1 : return
 
        t0_sec = time()

        arr_av1 = divide_protected(self.arr_sum1, self.arr_sum0)
        arr_av2 = divide_protected(self.arr_sum2, self.arr_sum0)

        arr_rms = np.sqrt(arr_av2 - np.square(arr_av1))
        rms_ave = arr_rms.mean()

        gate_half = self.nsigma*rms_ave

        if self.verbos & 1 :
            print '%s\nBegin stage 2 for %s after %d events' % (80*'_', self.src, self.counter)
            print '  mean rms=%.3f x %.1f = intensity gate= +/- %.3f around pixel average intensity' %\
                  (rms_ave, self.nsigma, gate_half)

        #print_ndarr(arr_av1, 'arr_av1')

        self.gate_hi = np.minimum(arr_av1 + gate_half, self.arr1*self.int_hi)
        self.gate_lo = np.maximum(arr_av1 - gate_half, self.arr1*self.int_lo)

        self.gate_hi = np.array(self.gate_hi, dtype=self.dtype_raw)
        self.gate_lo = np.array(self.gate_lo, dtype=self.dtype_raw)

        self.arr_sum0 = np.zeros(self.shape, dtype=np.int64)
        self.arr_sum1 = np.zeros(self.shape, dtype=np.double)
        self.arr_sum2 = np.zeros(self.shape, dtype=np.double)

        self.stage = 2

        if self.verbos & 1 : print 'Stage 2 initialization for %s consumes dt=%7.3f sec' % (self.src, time()-t0_sec)


    def summary(self, evt, env) :

        if self.verbos & 1 :
            print '%s\nRaw data for %s found/selected in %d events' % (80*'_', self.src, self.counter),

        if self.counter :
            print ', begin data summary stage'
        else :
            print ', STOP processing, there are no arrays to save...'
            return 

        t0_sec = time()

        # make shorter references
        det     = self.det
        ofname  = self.ofname
        plotim  = self.plotim
        savebw  = self.savebw
        verbos  = self.verbos
        int_hi  = self.int_hi
        int_lo  = self.int_lo
        fraclm  = self.fraclm
        counter = self.counter

        arr_av1 = divide_protected(self.arr_sum1, self.arr_sum0)
        arr_av2 = divide_protected(self.arr_sum2, self.arr_sum0)

        frac_int_lo = np.array(self.sta_int_lo/counter, dtype=np.float32)
        frac_int_hi = np.array(self.sta_int_hi/counter, dtype=np.float32)

        arr_rms = np.sqrt(arr_av2 - np.square(arr_av1))
        
        rms_min, rms_max = evaluate_limits(arr_rms, self.rmsnlo, self.rmsnhi, self.rms_lo, self.rms_hi, self.verbos, cmt='RMS')
                           #if self.rms_lo is None or self.rms_hi is None or self.rms_hi == 0.\
                           #else (self.rms_lo, self.rms_hi)
        #if rms_min<0 : rms_min=0

        ave_min, ave_max = evaluate_limits(arr_av1, self.intnlo, self.intnhi, self.int_lo, self.int_hi, self.verbos, cmt='AVE')\

        arr_sta_rms_hi = np.select((arr_rms>rms_max,),    (self.arr1,), 0)
        arr_sta_rms_lo = np.select((arr_rms<rms_min,),    (self.arr1,), 0)
        arr_sta_int_hi = np.select((frac_int_hi>fraclm,), (self.arr1,), 0)
        arr_sta_int_lo = np.select((frac_int_lo>fraclm,), (self.arr1,), 0)
        arr_sta_ave_hi = np.select((arr_av1>ave_max,),    (self.arr1,), 0)
        arr_sta_ave_lo = np.select((arr_av1<ave_min,),    (self.arr1,), 0)

        print '  Bad pixel status:'  
        print '  status  1: %8d pixel rms       > %.3f' % (arr_sta_rms_hi.sum(), rms_max) 
        print '  status  8: %8d pixel rms       < %.3f' % (arr_sta_rms_lo.sum(), rms_min) 
        print '  status  2: %8d pixel intensity > %g in more than %g fraction of events' % (arr_sta_int_hi.sum(), int_hi, fraclm) 
        print '  status  4: %8d pixel intensity < %g in more than %g fraction of events' % (arr_sta_int_lo.sum(), int_lo, fraclm)
        print '  status 16: %8d pixel average   > %g'   % (arr_sta_ave_hi.sum(), ave_max) 
        print '  status 32: %8d pixel average   < %g'   % (arr_sta_ave_lo.sum(), ave_min)

        #0/1/2/4/8/16/32 for good/hot-rms/saturated/cold/cold-rms/average above limit/average below limit, 
        arr_sta = np.zeros(self.shape, dtype=np.int64)
        arr_sta += arr_sta_rms_hi    # hot rms
        arr_sta += arr_sta_rms_lo*8  # cold rms
        arr_sta += arr_sta_int_hi*2  # satturated
        arr_sta += arr_sta_int_lo*4  # cold
        arr_sta += arr_sta_ave_hi*16 # too large average
        arr_sta += arr_sta_ave_lo*32 # too small average
        
        arr_msk  = np.select((arr_sta>0,), (self.arr0,), 1)

        if plotim &  1 : plot_det_image(det, evt, arr_av1,         tit='average')
        if plotim &  2 : plot_det_image(det, evt, arr_rms,         tit='RMS')
        if plotim &  4 : plot_det_image(det, evt, arr_sta,         tit='status')
        if plotim &  8 : plot_det_image(det, evt, arr_msk,         tit='mask')
        if plotim & 16 : plot_det_image(det, evt, self.arr_max,    tit='maximum')
        if plotim & 32 : plot_det_image(det, evt, self.arr_min,    tit='minimum')
        if plotim & 64 : plot_det_image(det, evt, self.sta_int_lo, tit='statistics below threshold')
        if plotim &128 : plot_det_image(det, evt, self.sta_int_hi, tit='statistics above threshold')

        self.arr_av1 = arr_av1        
        self.arr_rms = arr_rms
        self.arr_sta = arr_sta
        self.arr_msk = arr_msk


    def save_ndarrays(self) :
        """Saves n-d array in text files"""

        if self.counter :
            print ' save_ndarrays()'
        else :
            print ' save_ndarrays(): counter=0 - do not save files'
            return 

        addmetad = True

        det      = self.det
        ofname   = self.ofname
        verbos   = self.verbos
        savebw   = self.savebw
        counter  = self.counter

        cmts = ['DATASET  %s' % self.dsname, 'STATISTICS  %d' % counter]        
        template = fname_template(self.exp, self.runnum, self.tsec, self.tnsec, self.fid,\
                                  self.tsdate, self.tstime, self.src, counter, ofname)

        if savebw &  1 : det.save_asdaq(template % 'ave', self.arr_av1, cmts + ['ARR_TYPE  average'], '%8.2f', verbos, addmetad)
        if savebw &  2 : det.save_asdaq(template % 'rms', self.arr_rms, cmts + ['ARR_TYPE  RMS'],     '%8.2f', verbos, addmetad)
        if savebw &  4 : det.save_asdaq(template % 'sta', self.arr_sta, cmts + ['ARR_TYPE  status'],  '%d',    verbos, addmetad)
        if savebw &  8 : det.save_asdaq(template % 'msk', self.arr_msk, cmts + ['ARR_TYPE  mask'],    '%1d',   verbos, addmetad)
        if savebw & 16 : det.save_asdaq(template % 'max', self.arr_max, cmts + ['ARR_TYPE  max'],     '%d',    verbos, addmetad)
        if savebw & 32 : det.save_asdaq(template % 'min', self.arr_min, cmts + ['ARR_TYPE  min'],     '%d',    verbos, addmetad)
        if savebw & 64 :
            cmod = self._common_mode_pars(self.arr_av1, self.arr_rms, self.arr_msk)
            if cmod is None : return
            np.savetxt(template % 'cmo', cmod, fmt='%d', delimiter=' ', newline=' ')
            det.save_asdaq(template % 'cmm', cmod, cmts + ['ARR_TYPE  common_mode'],'%d', verbos, False)

        if verbos & 1 : print 'Data summary for %s is completed, dt=%7.3f sec' % (self.src, time()-t0_sec)

#------------------------------
#------------------------------

class JungfrauDarkProc :
    """Takes care about jungfrau dark data processing for a few (currently 3) gain modes.
    """
    number_of_gain_modes = 3

    dic_gain_mode = {'FixedGain1':  1,
                     'FixedGain2':  2,
                     'ForcedGain1': 1,
                     'ForcedGain2': 2,
                     'HighGain0':   0,
                     'Normal':      0}

    def __init__(self, parser=None):
        # make gain-mode processing modules:
        self.lst_gdp = [JungfrauNDArrDarkProc(parser) for igm in range(self.number_of_gain_modes)]


    def event(self, evt, env, evnum, igm) :
        """Switch between gain mode processing objects using igm index of the gain mode (0,1,2).
           - evnum (int) - event number
           - igm (int) - index of the gain mode in JungfrauDarkProc().dic_gain_mode
        """
        self.lst_gdp[igm].event(evt, env, evnum)


    def summary(self, evt, env) :
        for o in self.lst_gdp : 
            o.summary(evt, env)
            o.save_ndarrays()

#------------------------------
#------------------------------

def jungfrau_ndarr_raw_proc():

    PROC_DATA = True

    t0_sec = time()
    tdt = t0_sec

    parser = option_parser()
    (popts, pargs) = parser.parse_args()
    SKIP   = popts.evskip
    EVENTS = popts.events + SKIP
    verbos = popts.verbos
    source = popts.source
    dsname = popts.dsname

    print '%s\nIn jungfrau_ndarr_raw_proc' % (50*'_')
    print_command_line_parameters(parser)

    # Non-standard calib directory
    #psana.setOption('psana.calib-dir', './calib')

    if verbos & 1 : print 'Raw data processing of dataset: %s' % dsname

    # ecm = EventCodeManager(evcode, verbos)

    dic_gain_mode = JungfrauDarkProc().dic_gain_mode
    print '\ndic_gain_mode:'
    for item in dic_gain_mode.iteritems() : print item

    lst_dpo = [JungfrauDarkProc(parser) for src in source.split(',') if 'Jungfrau' in src]
    #          if PROC_DATA else []
    print 'List of sources: %s' % source

    if not len(lst_dpo) : 
        raise IOError('WARNING: list of sources "%s" does not have Jungfrau' % source)

    #====================
    #sys.exit('TEST EXIT')
    #====================

    ds  = psana.DataSource(dsname)
    env = ds.env()

    # Loop over runs
    for irun, run in enumerate(ds.runs()):
        print 'Run %d' % run.run()
        
        # Loop over calibcycles
        for istep, step in enumerate(run.steps()):
            env = step.env()
            gm = get_gain_mode(env, src)
            igm = dic_gain_mode[gm.name]

            if irun==0 and istep==0 :
              print '\ngm.names:'
              for name in gm.names.iteritems()  : print name

              print '\ngm.values:'
              for value in gm.values.iteritems() : print value

            print '  Calibcycle %d,  gain mode %s,  proc.index %d,  gm.numerator %d,  gm.denominator %d'%\
                  (istep, gm.name, igm, gm.numerator, gm.denominator)

            # Loop over events
            for i, evt in enumerate(step.events()):
            
                if i<SKIP : continue
                if not i<EVENTS : break
                #if not ecm.select(evt) : continue 
            
                if PROC_DATA :
                    for dpo in lst_dpo : dpo.event(evt,env,i,igm)
                if verbos & 2 :
                    if (i < 6) \
                    or (i < 51 and not i%10) \
                    or (not i%100) :
                    #or (not i%1000) :
                      tsec = time()
                      dt   = tsec - tdt
                      tdt  = tsec
                      print '  Event %4d,  time=%7.3f sec,  dt=%5.3f sec' % (i, time()-t0_sec, dt)

            print '  Run %d, calibcycle %d, number of events processed %d' % (run.run(), istep, i-SKIP)
        print '  Run %d, number of calibcycles processed %d' % (run.run(), istep+1)
    print 'Number of runs processed %d' % (irun+1)

    if PROC_DATA : 
        for dpo in lst_dpo : dpo.summary(evt,env)
    if verbos & 1 : print '%s\nTotal consumed time = %f sec.' % (80*'_', time()-t0_sec)

#------------------------------

def usage(mode=0) :
    proc_name = os.path.basename(sys.argv[0])
    if   mode == 1 : return 'Proceses jungfrau dark dataset.'
    elif mode == 2 : return 'Try: %s -h' % proc_name
    else : return\
           '\n%prog -d <dataset> [-s <source>] [-f <file-name-template>]'\
           '\n       [-n <events-collect>] [-m <events-skip>] [-v <verbosity-bitword>] [-p <plot-bitword>] ...'\
           '\n       where -v, -S control bit-words stand for 1/2/4/8/16/32/... - ave/rms/status/mask/max/min/sta_int_lo/sta_int_hi'\
           '\nEx.1:  %prog -d exp=cxi11216:run=9,11,12 -s CxiEndstation.0:Jungfrau.0 -f nda.expand -n 20 -m 0 -v 7 -p 1'\
           '\nEx.2:  %prog -d exp=cxi11216:run=9,11,12 -s CxiEndstation.0:Jungfrau.0 -f nda-#exp-#run-#src-#type.txt -n 10'

#------------------------------

def option_parser() :
    from optparse import OptionParser

    d_dsname = 'exp=cxi11216:run=9,12,13' # None
    d_source = 'CxiEndstation.0:Jungfrau.0' # None 
    d_ofname = 'nda-#exp-#run-#src-#evts-#type-#date-#time-#fid-#sec-#nsec.txt'
    d_events = 10000000
    d_evskip = 0
    d_intlow = 0
    d_inthig = 16000
    d_rmslow = 0
    d_rmshig = 16000
    d_fraclm = 0.1
    d_nsigma = 6.0
    d_plotim = 0      
    d_verbos = 7
    d_savebw = 0377
    d_intnlo = 6.0
    d_intnhi = 6.0
    d_rmsnlo = 6.0
    d_rmsnhi = 6.0
    d_evcode = None
    
    h_dsname='dataset name, default = %s' % d_dsname
    h_source='input ndarray source name, default = %s' % d_source
    h_ofname='output file name template, default = %s' % d_ofname
    h_events='number of events to collect, default = %s' % d_events
    h_evskip='number of events to skip, default = %s' % d_evskip
    h_intlow='intensity low limit, default = %s' % d_intlow
    h_inthig='intensity high limit, default = %s' % d_inthig
    h_rmslow='rms low limit, default = %s' % d_rmslow
    h_rmshig='rms high limit, default = %s' % d_rmshig
    h_fraclm='allowed fraction limit, default = %s' % d_fraclm
    h_nsigma='number of sigma for gated average, default = %s' % d_nsigma
    h_plotim='control bit-word to plot images, default = %s' % d_plotim
    h_verbos='control bit-word for verbosity, default = %s' % d_verbos
    h_savebw='control bit-word to save arrays, default = %s' % d_savebw
    h_intnlo='number of sigma from mean for low limit on INTENSITY, default = %s' % d_intnlo
    h_intnhi='number of sigma from mean for high limit on INTENSITY, default = %s' % d_intnhi
    h_rmsnlo='number of sigma from mean for low limit on RMS, default = %s' % d_rmsnlo
    h_rmsnhi='number of sigma from mean for high limit on RMS, default = %s' % d_rmsnhi
    h_evcode='comma separated event codes for selection as OR combination, any negative %s'%\
             'code inverts selection, default = %s'%str(d_evcode)

    parser = OptionParser(description=usage(1), usage = usage())
    parser.add_option('-d', '--dsname', dest='dsname', default=d_dsname, action='store', type='string', help=h_dsname)
    parser.add_option('-s', '--source', dest='source', default=d_source, action='store', type='string', help=h_source)
    parser.add_option('-f', '--ofname', dest='ofname', default=d_ofname, action='store', type='string', help=h_ofname)
    parser.add_option('-n', '--events', dest='events', default=d_events, action='store', type='int',    help=h_events)
    parser.add_option('-m', '--evskip', dest='evskip', default=d_evskip, action='store', type='int',    help=h_evskip)
    parser.add_option('-b', '--intlow', dest='intlow', default=d_intlow, action='store', type='float',  help=h_intlow)
    parser.add_option('-t', '--inthig', dest='inthig', default=d_inthig, action='store', type='float',  help=h_inthig)
    parser.add_option('-B', '--rmslow', dest='rmslow', default=d_rmslow, action='store', type='float',  help=h_rmslow)
    parser.add_option('-T', '--rmshig', dest='rmshig', default=d_rmshig, action='store', type='float',  help=h_rmshig)
    parser.add_option('-F', '--fraclm', dest='fraclm', default=d_fraclm, action='store', type='float',  help=h_fraclm)
    parser.add_option('-g', '--nsigma', dest='nsigma', default=d_nsigma, action='store', type='float',  help=h_nsigma)
    parser.add_option('-p', '--plotim', dest='plotim', default=d_plotim, action='store', type='int',    help=h_plotim)
    parser.add_option('-v', '--verbos', dest='verbos', default=d_verbos, action='store', type='int',    help=h_verbos)
    parser.add_option('-S', '--savebw', dest='savebw', default=d_savebw, action='store', type='int',    help=h_savebw)
    parser.add_option('-D', '--intnlo', dest='intnlo', default=d_intnlo, action='store', type='float',  help=h_intnlo)
    parser.add_option('-U', '--intnhi', dest='intnhi', default=d_intnhi, action='store', type='float',  help=h_intnhi)
    parser.add_option('-L', '--rmsnlo', dest='rmsnlo', default=d_rmsnlo, action='store', type='float',  help=h_rmsnlo)
    parser.add_option('-H', '--rmsnhi', dest='rmsnhi', default=d_rmsnhi, action='store', type='float',  help=h_rmsnhi)
    parser.add_option('-c', '--evcode', dest='evcode', default=d_evcode, action='store', type='string', help=h_evcode)
    #parser.add_option('-p', '--plotim', dest='plotim', default=d_plotim, action='store_true',           help=h_plotim)

    return parser

#------------------------------

if __name__ == "__main__" :
    if len(sys.argv)==1 : print '\n%s' % usage(2)
    #dpo = JungfrauNDArrDarkProc()
    jungfrau_ndarr_raw_proc()
    sys.exit(0)

#------------------------------
