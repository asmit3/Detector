#!/usr/bin/env python

#------------------------------
import os
import sys
import psana
import numpy as np
from time import time, localtime, strftime
from Detector.GlobalUtils import print_ndarr, divide_protected
#from Detector.PyDetector import PyDetector
#from ImgAlgos.PyAlgos import reshape_nda_to_2d, reshape_nda_to_3d, print_arr_attr, print_arr

#------------------------------

def plot_det_image(det, evt, nda, tit='') :
    """Plots averaged image
    """
    import pyimgalgos.GlobalGraphics as gg

    img = det.image(evt, nda)
    if img is None : sys.exit('Image is not available. FURTHER TEST IS TERMINATED')
    
    ave, rms = nda.mean(), nda.std()
    gg.plotImageLarge(img, amp_range=(ave-1*rms, ave+3*rms), title=tit)
    gg.show()

#------------------------------

def evaluate_rms_limits(arr_rms, verbos=1, nneg=5, npos=6, frave=0.01) :
    """Returns evaluated low and high limit of the RMS, which are used to find rms-cold and rms-hot pixels.
    """
    #t0_sec = time()
    ave, std = arr_rms.mean(), arr_rms.std()
    rms_lo, rms_hi = ave-nneg*std, ave+npos*std
    if rms_lo <= 0 : rms_lo = frave*ave
    if verbos & 1 :
        print '  %s: RMS ave, std = %.3f, %.3f  low, high limits = %.3f, %.3f'%\
              (sys._getframe().f_code.co_name, ave, std, rms_lo, rms_hi)

    return rms_lo, rms_hi

#------------------------------

def str_tstamp(fmt='%Y-%m-%dT%H:%M:%S', time_sec=None) :
    return strftime(fmt, localtime(time_sec))

#------------------------------

def replace(in_tmp, pattern, subst) :
    """If pattern in the in_tmp replace it with subst.
       Returns str object in_tmp with replaced patterns. 
    """
    fields = in_tmp.split(pattern, 1) 
    if len(fields) > 1 :
        return '%s%s%s' % (fields[0], subst, fields[1])
    else :
        return in_tmp

#------------------------------

def fname_template(evt, env, src, ofname, nevts):
    """Replaces parts of the file name specified as
       #src, #exp, #run, #evts, #type, #date, #time, #fid, #sec, #nsec
       with actual values
    """
    template = replace(ofname,   '#src', src)
    template = replace(template, '#exp', env.experiment())
    template = replace(template, '#run', 'r%04d'%evt.run())
    template = replace(template, '#type', '%s')
    evtid = evt.get(psana.EventId)
    tsec, tnsec = evtid.time()
    fid = evtid.fiducials()
    template = replace(template, '#date', str_tstamp('%Y-%m-%d', tsec))
    template = replace(template, '#time', str_tstamp('%H:%M:%S', tsec))
    template = replace(template, '#fid',  str(fid))
    template = replace(template, '#sec',  '%d' % tsec)
    template = replace(template, '#nsec', '%09d' % tnsec)
    template = replace(template, '#evts', 'e%06d' % nevts)
    if not '%s' in template : template += '-%s'
    return template

#------------------------------

class DetNDArrRawProc :

    def __init__(self, dsname, source, ofname, events, evskip, intlow, inthig, rmslow, rmshig, fraclm, nsigma, plotim, verbos, savebw):

        self.dsname = dsname
        self.src    = source
        self.ofname = ofname
        self.events = events
        self.evskip = evskip

        self.int_lo = intlow if intlow is not None else 1
        self.int_hi = inthig if inthig is not None else 16000
        self.rms_lo = rmslow # if None - will be evaluated later
        self.rms_hi = rmshig # if None - will be evaluated later
        self.fraclm = fraclm

        self.plotim = plotim
        self.verbos = verbos
        self.savebw = savebw

        self.evstg1 = max(self.events*0.05, 5)
        self.nsigma = nsigma
        
        self.det     = None
        self.shape   = None
        self.counter = 0
        self.stage   = 0

        if verbos & 1 :
            self.print_attrs()
            print 'Begin processing'


    def print_attrs(self) :
        print '%s\nAttributes of the %s object' % (50*'_', self.__class__.__name__)
        print 'dataset name                    : %s'   % self.dsname
        print 'source name                     : %s'   % self.src   
        print 'output file name template       : %s'   % self.ofname
        print 'number of events to collect     : %d'   % self.events
        print 'number of events to skip        : %d'   % self.evskip
        print 'number of events for stage 1    : %d'   % self.evstg1
        print 'number of sigma intensity range : %.3f' % self.nsigma
        print 'control bit-word to plot images : %d'   % self.plotim
        print 'control bit-word for verbosity  : %d'   % self.verbos
        print 'control bit-word to save arrays : %d'   % self.savebw
        print 'intensity low limit (ADU)       : %d'   % self.int_lo
        print 'intensity high limit (ADU)      : %d'   % self.int_hi
        print 'rms low limit (ADU)             : ',      self.rms_lo
        print 'rms high limit (ADU)            : ',      self.rms_hi
        print 'allowed low/high fraction limit : %.3f' % self.fraclm
        print 50*'_', '\n'


    def _common_mode_pars(self, arr_ave, arr_rms, arr_msk) :
        """Returns detector-dependent common mode parameters as np.array for a few detectors and None for others.
        """
        import PSCalib.GlobalUtils as gu 
        import math

        dettype = gu.det_type_from_source(self.src)

        ave = arr_ave[arr_msk>0].mean()
        #rms = arr_ave[arr_msk>0].std()
        rms = arr_rms[arr_msk>0].mean()

        if self.verbos & 1 :
            print 'Evaluate common mode for source: %s det: %s, estimated intensity ave: %.3f  rms: %.3f' %\
                  (self.src, gu.dic_det_type_to_name[dettype], ave, rms)

        if dettype == gu.PNCCD :
            return np.array((3, math.ceil(4*rms), math.ceil(4*rms), 128))

        #elif dettype == gu.EPIX100A :
        #    return np.array((4, 6, math.ceil(2*rms), math.ceil(2*rms)))

        #elif dettype == gu.CSPAD :
        #    return np.array((1, math.ceil(3*rms), math.ceil(2*rms), 100))

        #elif dettype == gu.CSPAD2X2 :
        #    return np.array((1, math.ceil(3*rms), math.ceil(2*rms), 100))

        else :
            return None


    def _init_stage1(self, evt, env) :

        if self.shape is not None : return True

        if self.det is None : self.det = psana.Detector(self.src, env)
        if self.det is None :
            raise ValueError('Can not create the Detector object for source %s' % self.src)

        ndaraw = self.det.raw(evt)
        
        if ndaraw.size == 0 : return False
        if ndaraw.shape[0] == 0 : return False

        self.shape=ndaraw.shape

        if self.verbos & 1 : print 'Begin stage 1 for %s, raw.shape = %s, intensity limits low: %.1f  high: %.1f'%\
                                   (self.src, str(self.shape), self.int_lo, self.int_hi) 
    
        self.arr0       = np.zeros(self.shape, dtype=ndaraw.dtype)
        self.arr1       = np.ones (self.shape, dtype=ndaraw.dtype)

        self.sta_int_lo = np.zeros(self.shape, dtype=ndaraw.dtype)
        self.sta_int_hi = np.zeros(self.shape, dtype=ndaraw.dtype)

        self.arr_sum0   = np.zeros(self.shape, dtype=np.uint32)
        self.arr_sum1   = np.zeros(self.shape, dtype=np.double)
        self.arr_sum2   = np.zeros(self.shape, dtype=np.double)

        self.gate_lo    = np.ones (self.shape, dtype=ndaraw.dtype) * self.int_lo
        self.gate_hi    = np.ones (self.shape, dtype=ndaraw.dtype) * self.int_hi

        if self.savebw & 16 : self.arr_max = np.zeros(self.shape, dtype=ndaraw.dtype)
        if self.savebw & 32 : self.arr_min = np.ones (self.shape, dtype=ndaraw.dtype) * 0xffff

        self.stage = 1
        
        return True


    def event(self, evt, env, evnum) :

        if not self._init_stage1(evt, env) : return

        ndaraw = self.det.raw(evt)
        if ndaraw is None : return
        ndadbl = np.array(ndaraw, dtype=np.double)

        self._init_stage2(ndaraw)
        self._proc_event(ndadbl, ndaraw)


    def _proc_event(self, ndadbl, ndaraw) :

        self.counter += 1

        cond_lo = ndaraw<self.gate_lo
        cond_hi = ndaraw>self.gate_hi
        condlist = (np.logical_not(np.logical_or(cond_lo, cond_hi)),)

        self.arr_sum0   += np.select(condlist, (self.arr1,), 0)
        self.arr_sum1   += np.select(condlist, (ndadbl,), 0)
        self.arr_sum2   += np.select(condlist, (np.square(ndadbl),), 0)

        self.sta_int_lo += np.select((ndaraw<self.int_lo,), (self.arr1,), 0)
        self.sta_int_hi += np.select((ndaraw>self.int_hi,), (self.arr1,), 0)

        if self.savebw & 16 : self.arr_max = np.maximum(self.arr_max, ndaraw)
        if self.savebw & 32 : self.arr_min = np.minimum(self.arr_min, ndaraw)


    def _init_stage2(self, ndaraw) :

        if self.stage & 2 : return
        if self.counter < self.evstg1 : return
 
        t0_sec = time()

        arr_av1 = divide_protected(self.arr_sum1, self.arr_sum0)
        arr_av2 = divide_protected(self.arr_sum2, self.arr_sum0)

        arr_rms = np.sqrt(arr_av2 - np.square(arr_av1))
        rms_ave = arr_rms.mean()

        gate_half = self.nsigma*rms_ave

        if self.verbos & 1 :
            print '%s\nBegin stage 2 for %s after %d events' % (80*'_', self.src, self.counter)
            print '  mean rms=%.3f x %.1f = intensity gate= +/- %.3f around pixel average intensity' %\
                  (rms_ave, self.nsigma, gate_half)

        #print_ndarr(arr_av1, 'arr_av1')

        self.gate_hi = np.minimum(arr_av1 + gate_half, self.arr1*self.int_hi)
        self.gate_lo = np.maximum(arr_av1 - gate_half, self.arr1*self.int_lo)

        self.gate_hi = np.array(self.gate_hi, dtype=ndaraw.dtype)
        self.gate_lo = np.array(self.gate_lo, dtype=ndaraw.dtype)

        self.arr_sum0 = np.zeros(self.shape, dtype=np.uint32)
        self.arr_sum1 = np.zeros(self.shape, dtype=np.double)
        self.arr_sum2 = np.zeros(self.shape, dtype=np.double)

        self.stage = 2

        if self.verbos & 1 : print 'Stage 2 initialization for %s consumes dt=%7.3f sec' % (self.src, time()-t0_sec)


    def summary(self, evt, env) :

        if self.verbos & 1 :
            print '%s\nRaw data for %s found in %d events, begin data summary stage' % (80*'_', self.src, self.counter)
        t0_sec = time()

        det     = self.det
        ofname  = self.ofname
        plotim  = self.plotim
        savebw  = self.savebw
        verbos  = self.verbos
        int_hi  = self.int_hi
        int_lo  = self.int_lo
        fraclm  = self.fraclm
        counter = self.counter

        arr_av1 = divide_protected(self.arr_sum1, self.arr_sum0)
        arr_av2 = divide_protected(self.arr_sum2, self.arr_sum0)

        frac_int_lo = np.array(self.sta_int_lo/counter, dtype=np.float32)
        frac_int_hi = np.array(self.sta_int_hi/counter, dtype=np.float32)

        arr_rms = np.sqrt(arr_av2 - np.square(arr_av1))
        
        rms_lo, rms_hi = evaluate_rms_limits(arr_rms, self.verbos) \
                            if self.rms_lo is None or self.rms_hi is None or self.rms_hi == 0. \
                            else (self.rms_lo, self.rms_hi)

        arr_sta_rms_hi = np.select((arr_rms>rms_hi,),     (self.arr1,), 0)
        arr_sta_rms_lo = np.select((arr_rms<rms_lo,),     (self.arr1,), 0)
        arr_sta_int_hi = np.select((frac_int_hi>fraclm,), (self.arr1,), 0)
        arr_sta_int_lo = np.select((frac_int_lo>fraclm,), (self.arr1,), 0)

        print '  Bad pixel status:'  
        print '  status 1: %8d pixel have rms  > %.3f' % (arr_sta_rms_hi.sum(), rms_hi) 
        print '  status 2: %8d pixel intensity > %d'   % (arr_sta_int_hi.sum(), int_hi) 
        print '  status 4: %8d pixel intensity < %d'   % (arr_sta_int_lo.sum(), int_lo) 
        print '  status 8: %8d pixel have rms  < %.3f' % (arr_sta_rms_lo.sum(), rms_lo) 

        #0/1/2/4/8 for good/hot-rms/saturated/cold/cold-rms, 
        arr_sta  = arr_sta_rms_hi   # hot rms
        arr_sta += arr_sta_rms_lo*8 # cold rms
        arr_sta += arr_sta_int_hi*2 # satturated
        arr_sta += arr_sta_int_lo*4 # cold
        
        arr_msk  = np.select((arr_sta>0,), (self.arr0,), 1)

        cmod = self._common_mode_pars(arr_av1, arr_rms, arr_msk)

        if plotim &  1 : plot_det_image(det, evt, arr_av1,         tit='average')
        if plotim &  2 : plot_det_image(det, evt, arr_rms,         tit='RMS')
        if plotim &  4 : plot_det_image(det, evt, arr_sta,         tit='status')
        if plotim &  8 : plot_det_image(det, evt, arr_msk,         tit='mask')
        if plotim & 16 : plot_det_image(det, evt, self.arr_max,    tit='maximum')
        if plotim & 32 : plot_det_image(det, evt, self.arr_min,    tit='minimum')
        if plotim & 64 : plot_det_image(det, evt, self.sta_int_lo, tit='statistics below threshold')
        if plotim &128 : plot_det_image(det, evt, self.sta_int_hi, tit='statistics above threshold')
        
        cmts = ['DATASET  %s' % self.dsname, 'STATISTICS  %d' % counter]
        
        # Save n-d array in text file % 
        template = fname_template(evt, env, self.src, ofname, counter)
        addmetad=True

        if savebw &  1 : det.save_asdaq(template % 'ave', arr_av1,      cmts + ['ARR_TYPE  average'], '%8.2f', verbos, addmetad)
        if savebw &  2 : det.save_asdaq(template % 'rms', arr_rms,      cmts + ['ARR_TYPE  RMS'],     '%8.2f', verbos, addmetad)
        if savebw &  4 : det.save_asdaq(template % 'sta', arr_sta,      cmts + ['ARR_TYPE  status'],  '%d',    verbos, addmetad)
        if savebw &  8 : det.save_asdaq(template % 'msk', arr_msk,      cmts + ['ARR_TYPE  mask'],    '%1d',   verbos, addmetad)
        if savebw & 16 : det.save_asdaq(template % 'max', self.arr_max, cmts + ['ARR_TYPE  max'],     '%d',    verbos, addmetad)
        if savebw & 32 : det.save_asdaq(template % 'min', self.arr_min, cmts + ['ARR_TYPE  min'],     '%d',    verbos, addmetad)
        if savebw & 64 and cmod is not None :
            np.savetxt(template % 'cmo', cmod, fmt='%d', delimiter=' ', newline=' ')
            det.save_asdaq(template % 'cmm', cmod, cmts + ['ARR_TYPE  common_mode'],'%d', verbos, False)

        if self.verbos & 1 : print 'Data summary for %s is completed, dt=%7.3f sec' % (self.src, time()-t0_sec)

#------------------------------

def det_ndarr_raw_proc(dsname, sources, ofname, events, evskip, intlow, inthig, rmslow, rmshig, fraclm, nsigma, plotim, verbos, savebw):

    t0_sec = time()
    tdt = t0_sec

    # Non-standard calib directory
    #psana.setOption('psana.calib-dir', './calib')

    SKIP   = evskip
    EVENTS = events + SKIP
    
    if verbos & 1 : print 'Raw data processing of dataset: %s' % (dsname)

    lst_dpo = [DetNDArrRawProc(dsname, src, ofname, events, evskip, intlow, inthig, rmslow, rmshig, fraclm, nsigma, plotim, verbos, savebw)\
               for src in sources.split(',')]

    ds  = psana.DataSource(dsname)
    env = ds.env()
        
    for i, evt in enumerate(ds.events()) :
        if i<SKIP    : continue
        if not i<EVENTS : break
        for dpo in lst_dpo : dpo.event(evt,env,i)
        if verbos & 2 :
          if (i < 6) \
          or (i < 51 and not i%10) \
          or (i < 1001 and not i%100) \
          or (not i%1000) :
            tsec = time()
            dt   = tsec - tdt
            tdt  = tsec
            print '  Event: %4d,  time=%7.3f sec,  dt=%5.3f sec' % (i, time()-t0_sec, dt)

    for dpo in lst_dpo : dpo.summary(evt,env)

    if verbos & 1 : print '%s\nTotal consumed time = %f sec.' % (80*'_', time()-t0_sec)

#------------------------------

def usage(mode=0) :
    if mode == 1 : return 'Proceses detector raw n-d array for specified source and saves files.'
    else : return\
           '       %prog -d <dataset> [-s <source>] [-f <file-name-template>]'+\
           ' [-n <events-collect>] [-m <events-skip>] [-v 7] [-p 1] [-v 7] ...'+\
           '\n  -v, -S control bit-words stand for 1/2/4/8/16/32/... - ave/rms/status/mask/max/min/sta_int_lo/sta_int_hi'+\
           '\nEx.1:  %prog -d exp=cxif5315:run=169 -s CxiDs2.0:Cspad.0 -f nda.expand -n 20 -m 0 -v 7 -p 1'+\
           '\nEx.2:  %prog -d exp=mecj5515:run=102 -s MecTargetChamber.0:Cspad2x2.1,MecTargetChamber.0:Cspad2x2.2 -f nda-#exp-#run-#src-#type.txt -n 10'+\
           '\nEx.3:  %prog -d exp=amo42112:run=120:stream=0-79:xtc -s AmoBPS.0:Opal1000.0 -n 5 -f nda-#exp-#run-peds-#type-#src.txt'
#------------------------------

def command_line_parser() :
    from optparse import OptionParser

    dsname_def = None # 'exp=cxif5315:run=169'
    source_def = None # 'CxiDs2.0:Cspad.0'
    ofname_def = 'nda-#exp-#run-#src-#evts-#type-#date-#time-#fid-#sec-#nsec.txt'
    events_def = 10000000
    evskip_def = 0
    intlow_def = None
    inthig_def = None
    rmslow_def = None
    rmshig_def = None
    fraclm_def = 0.1
    nsigma_def = 6.0
    plotim_def = 0      
    verbos_def = 7
    savebw_def = 0377

    h_dsname='dataset name, default = %s' % dsname_def
    h_source='input ndarray source name, default = %s' % source_def
    h_ofname='output file name template, default = %s' % ofname_def
    h_events='number of events to collect, default = %s' % events_def
    h_evskip='number of events to skip, default = %s' % evskip_def
    h_intlow='intensity low limit, default = %s' % intlow_def
    h_inthig='intensity high limit, default = %s' % inthig_def
    h_rmslow='rms low limit, default = %s' % rmslow_def
    h_rmshig='rms high limit, default = %s' % rmshig_def
    h_fraclm='allowed fraction limit, default = %s' % fraclm_def
    h_nsigma='number of sigma for gated average, default = %s' % nsigma_def
    h_plotim='control bit-word to plot images, default = %s' % plotim_def
    h_verbos='control bit-word for verbosity, default = %s' % verbos_def
    h_savebw='control bit-word to save arrays, default = %s' % savebw_def

    parser = OptionParser(description=usage(1), usage ='usage: %prog [options]\n' + usage())
    parser.add_option('-d', '--dsname', dest='dsname', default=dsname_def, action='store', type='string', help=h_dsname)
    parser.add_option('-s', '--source', dest='source', default=source_def, action='store', type='string', help=h_source)
    parser.add_option('-f', '--ofname', dest='ofname', default=ofname_def, action='store', type='string', help=h_ofname)
    parser.add_option('-n', '--events', dest='events', default=events_def, action='store', type='int',    help=h_events)
    parser.add_option('-m', '--evskip', dest='evskip', default=evskip_def, action='store', type='int',    help=h_evskip)
    parser.add_option('-b', '--intlow', dest='intlow', default=intlow_def, action='store', type='int',    help=h_intlow)
    parser.add_option('-t', '--inthig', dest='inthig', default=inthig_def, action='store', type='int',    help=h_inthig)
    parser.add_option('-B', '--rmslow', dest='rmslow', default=rmslow_def, action='store', type='float',  help=h_rmslow)
    parser.add_option('-T', '--rmshig', dest='rmshig', default=rmshig_def, action='store', type='float',  help=h_rmshig)
    parser.add_option('-F', '--fraclm', dest='fraclm', default=fraclm_def, action='store', type='float',  help=h_fraclm)
    parser.add_option('-g', '--nsigma', dest='nsigma', default=nsigma_def, action='store', type='float',  help=h_nsigma)
    parser.add_option('-p', '--plotim', dest='plotim', default=plotim_def, action='store', type='int',    help=h_plotim)
    parser.add_option('-v', '--verbos', dest='verbos', default=verbos_def, action='store', type='int',    help=h_verbos)
    parser.add_option('-S', '--savebw', dest='savebw', default=savebw_def, action='store', type='int',    help=h_savebw)
    #parser.add_option('-p', '--plotim', dest='plotim', default=plotim_def, action='store_true',          help=h_plotim)
 
    opts, args = parser.parse_args()
    return opts, args

#------------------------------

if __name__ == "__main__" :

    proc_name = os.path.basename(sys.argv[0])
    if len(sys.argv)==1 :
        print '%s\nHelp: %s -h' % (usage(1), proc_name)
        sys.exit(0)
        
    opts, args = command_line_parser()

    if opts.verbos & 4 :
        print 'Command:', ' '.join(sys.argv)
        print 'Options:'
        for k,v in opts.__dict__.items() : print '  %s : %s' % (k, str(v))
        print 'Arguments: ', args

    if opts.dsname is None : sys.exit('WARNING: dataset (-d <dataset>) must be specified.')
    if opts.source is None : sys.exit('WARNING: Data source (-s <source>) must be specified.')

    det_ndarr_raw_proc(opts.dsname, opts.source, opts.ofname, opts.events, opts.evskip, 
                       opts.intlow, opts.inthig, opts.rmslow, opts.rmshig, opts.fraclm, opts.nsigma, 
                       opts.plotim, opts.verbos, opts.savebw)

    sys.exit(0)

#------------------------------
